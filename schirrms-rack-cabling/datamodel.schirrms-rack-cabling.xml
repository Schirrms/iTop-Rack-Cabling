<?xml version="1.0" encoding="UTF-8"?>
<itop_design xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.5">
	<constants>
	</constants>
	<classes>
		<class id="PatchPanel" _delta="define">
			<parent>DatacenterDevice</parent>
			<properties>
				<category>bizmodel,searchable</category>
				<abstract>false</abstract>
				<key_type>autoincrement</key_type>
				<db_table>patchpanel</db_table>
				<db_key_field>id</db_key_field>
				<db_final_class_field/>
				<naming>
					<attributes>
						<attribute id="name"/>
					</attributes>
				</naming>
				<display_template/>
				<icon>images/patchpanel.png</icon>
				<reconciliation>
					<attributes>
						<attribute id="name"/>
						<attribute id="org_id"/>
						<attribute id="organization_name"/>
					</attributes>
				</reconciliation>
			</properties>
			<fields>
				<field id="patchpanelport_list" xsi:type="AttributeLinkedSet">
					<linked_class>PatchPanelPort</linked_class>
					<ext_key_to_me>connectableci_id</ext_key_to_me>
					<edit_mode>in_place</edit_mode>
					<tracking_level>all</tracking_level>
					<count_min>0</count_min>
					<count_max>0</count_max>
				</field>
			</fields>
			<presentation>
				<details>
					<items>
						<item id="contacts_list">
							<rank>120</rank>
						</item>
						<item id="documents_list">
							<rank>130</rank>
						</item>
						<item id="patchpanelport_list">
							<rank>140</rank>
						</item>
						<item id="providercontracts_list">
							<rank>150</rank>
						</item>
						<item id="services_list">
							<rank>160</rank>
						</item>
						<item id="name">
							<rank>10</rank>
						</item>
						<item id="org_id">
							<rank>20</rank>
						</item>
						<item id="status">
							<rank>30</rank>
						</item>
						<item id="business_criticity">
							<rank>40</rank>
						</item>
						<item id="location_id">
							<rank>50</rank>
						</item>
						<item id="rack_id">
							<rank>60</rank>
						</item>
						<item id="nb_u">
							<rank>80</rank>
						</item>
						<item id="brand_id">
							<rank>90</rank>
						</item>
						<item id="model_id">
							<rank>100</rank>
						</item>
						<item id="description">
							<rank>110</rank>
						</item>
					</items>
				</details>
				<search>
					<items>
						<item id="name">
							<rank>10</rank>
						</item>
						<item id="org_id">
							<rank>20</rank>
						</item>
						<item id="status">
							<rank>30</rank>
						</item>
						<item id="business_criticity">
							<rank>40</rank>
						</item>
						<item id="location_id">
							<rank>50</rank>
						</item>
						<item id="rack_id">
							<rank>60</rank>
						</item>
						<item id="brand_id">
							<rank>90</rank>
						</item>
						<item id="model_id">
							<rank>100</rank>
						</item>
					</items>
				</search>
				<list>
					<items>
						<item id="org_id">
							<rank>10</rank>
						</item>
						<item id="status">
							<rank>20</rank>
						</item>
						<item id="business_criticity">
							<rank>30</rank>
						</item>
						<item id="location_id">
							<rank>50</rank>
						</item>
						<item id="rack_id">
							<rank>60</rank>
						</item>
						<item id="brand_id">
							<rank>90</rank>
						</item>
						<item id="model_id">
							<rank>100</rank>
						</item>
					</items>
				</list>
			</presentation>
			<methods>
			</methods>
			<relations>
			</relations>
		</class>
		<class id="PatchPanelPort" _delta="define">
			<parent>GenericCommLayer1Interface</parent>
			<properties>
				<category>bizmodel,searchable</category>
				<abstract>false</abstract>
				<key_type>autoincrement</key_type>
				<db_table>patchpanelport</db_table>
				<db_key_field>id</db_key_field>
				<db_final_class_field/>
				<naming>
					<attributes>
						<attribute id="connectableci_name"/>
						<attribute id="name"/>
					</attributes>
				</naming>
				<display_template/>
				<icon>images/patchpanelport.png</icon>
				<reconciliation>
					<attributes>
						<attribute id="name"/>
						<attribute id="connectableci_name"/>
					</attributes>
				</reconciliation>
			</properties>
			<fields>
				<field id="remotebackpanelport_id" xsi:type="AttributeExternalKey">
					<sql>remotebackpanelport_id</sql>
					<target_class>PatchPanelPort</target_class>
					<is_null_allowed>true</is_null_allowed>
					<on_target_delete>DEL_MANUAL</on_target_delete>
					<filter><![CDATA[SELECT PatchPanelPort WHERE remotebackpanelport_id = '' AND id != :this->id AND physcommtype_id = :this->physcommtype_id]]></filter>
					<dependencies>
						<attribute id="physcommtype_id" />
					</dependencies>
				</field>
				<field id="remotebackpanelport_name" xsi:type="AttributeExternalField">
					<extkey_attcode>remotebackpanelport_id</extkey_attcode>
					<target_attcode>name</target_attcode>
				</field>
				<field id="physcommtype_id" xsi:type="AttributeExternalKey">
					<sql>physcommtype_id</sql>
					<target_class>GenericPhysCommConnector</target_class>
					<is_null_allowed>false</is_null_allowed>
					<on_target_delete>DEL_MANUAL</on_target_delete>
				</field>
				<field id="physcommtype_name" xsi:type="AttributeExternalField">
					<extkey_attcode>physcommtype_id</extkey_attcode>
					<target_attcode>name</target_attcode>
				</field>
			</fields>
			<presentation>
				<details>
					<items>
						<item id="name">
							<rank>10</rank>
						</item>
						<item id="comment">
							<rank>20</rank>
						</item>
						<item id="connectableci_id">
							<rank>30</rank>
						</item>
						<item id="physcommtype_id">
							<rank>40</rank>
						</item>
						<item id="remotebackpanelport_id">
							<rank>50</rank>
						</item>
						<item id="cable_id">
							<rank>60</rank>
						</item>
					</items>
				</details>
				<search>
					<items>
						<item id="friendlyname">
							<rank>10</rank>
						</item>
						<item id="connectableci_id">
							<rank>20</rank>
						</item>
						<item id="name">
							<rank>30</rank>
						</item>
						<item id="physcommtype_id">
							<rank>40</rank>
						</item>
						<item id="remotebackpanelport_id">
							<rank>50</rank>
						</item>
						<item id="cable_id">
							<rank>60</rank>
						</item>
					</items>
				</search>
				<list>
					<items>
						<item id="friendlyname">
							<rank>10</rank>
						</item>
						<item id="connectableci_id">
							<rank>20</rank>
						</item>
						<item id="name">
							<rank>30</rank>
						</item>
						<item id="physcommtype_id">
							<rank>40</rank>
						</item>
						<item id="remotebackpanelport_id">
							<rank>50</rank>
						</item>
						<item id="cable_id">
							<rank>60</rank>
						</item>
					</items>
				</list>
			</presentation>
			<methods>
				<method id="ConnectBackPanelRemotePort">
					<static>false</static>
					<access>protected</access>
					<type>Overload-cmdbAbstractObject</type>
					<code><![CDATA[ protected function ConnectBackPanelRemotePort()
						{
							// print "ConnectBackPanelRemotePort begins<BR>";
							if (!(empty($this->Get('remotebackpanelport_id'))))
							{
								// print "remotebackpanelport_name = ".$this->Get('remotebackpanelport_name')."<br>";
								// try to get the port this port is connected to
								$oDevice = MetaModel::GetObject('PatchPanelPort', $this->Get('remotebackpanelport_id'));
								if (is_object($oDevice) && (get_class($oDevice) == 'PatchPanelPort'))
								{
									// print "Test Object OK<br>";
									$sOQL = "SELECT PatchPanelPort WHERE id = :device";
									$oConnectionSet = new DBObjectSet(DBObjectSearch::FromOQL($sOQL), array(), array('device' => $this->Get('remotebackpanelport_id'),));

									// There should be one link - do it in a safe manner anyway
									while ($oConnection = $oConnectionSet->Fetch())
									{
										// print "Updating : '".$oConnection->Get('name')."'<br>";
										$oConnection->Set('remotebackpanelport_id', $this->GetKey());
										// $oConnection->Set('connected_to_device_id', $this->Get('connectableci_id'));
										$oConnection->DBUpdate();
									}
								}
							}
							// print "ConnectBackPanelRemotePort ends<BR>";
						}
					]]></code>
				</method>
				<method id="DisconnectBackPanelRemotePort">
					<static>false</static>
					<access>protected</access>
					<type>Overload-cmdbAbstractObject</type>
					<code><![CDATA[ protected function DisconnectBackPanelRemotePort()
						{
							// print "DisconnectBackPanelRemotePort begins<BR>";
							if (!(empty($this->GetOriginal('remotebackpanelport_id'))))
							{
								// print "was connected_to_name = ".$this->GetOriginal('remotebackpanelport_id')."<br>";
								// try to get the port this port was connected to
								// This one was hard to find : adding false in the next request allow a null answer
								// witch is OK as we have to test after operations anyway
								// see also $$mustBeFound value for MetaModel::GetObject
								$oDevice = MetaModel::GetObject('PatchPanelPort', $this->GetOriginal('remotebackpanelport_id'), false);
								if (is_object($oDevice) && (get_class($oDevice) == 'PatchPanelPort'))
								{
									// print "Test Object OK<br>";
									$sOQL = "SELECT PatchPanelPort WHERE remotebackpanelport_id = :device";
									$oConnectionSet = new DBObjectSet(DBObjectSearch::FromOQL($sOQL), array(), array('device' => $this->GetKey(),));

									// There should be one link - do it in a safe manner anyway
									while ($oConnection = $oConnectionSet->Fetch())
									{
										// print "Updating : '".$oConnection->Get('name')."'<br>";
										$oConnection->Set('remotebackpanelport_id', '');
										// $oConnection->Set('connected_to_device_id', '');
										$oConnection->DBUpdate();
									}
								}
							}
							// print "DisconnectBackPanelRemotePort ends<BR>";
						}
					]]></code>
				</method>
				<method id="AfterInsert">
					<static>false</static>
					<access>protected</access>
					<type>Overload-DBObject</type>
					<code><![CDATA[	protected function AfterInsert()
						{
							$this->ConnectBackPanelRemotePort();
							parent::AfterInsert();
				}]]></code>
				</method>
				<method id="OnUpdate">
					<static>false</static>
					<access>protected</access>
					<type>Overload-DBObject</type>
					<code><![CDATA[	protected function OnUpdate()
						{
							$this->DisconnectBackPanelRemotePort();
							$this->ConnectBackPanelRemotePort();
							parent::OnUpdate();
				}]]></code>
				</method>
				<method id="OnDelete">
					<static>false</static>
					<access>protected</access>
					<type>Overload-DBObject</type>
					<code><![CDATA[	protected function OnDelete()
						{
							$this->DisconnectBackPanelRemotePort();
							parent::OnDelete();
				}]]></code>
				</method>
			</methods>
			<relations>
			</relations>
		</class>
		<class id="PatchCableColor" _delta="define">
			<parent>cmdbAbstractObject</parent>
			<properties>
				<category>bizmodel,searchable</category>
				<abstract>false</abstract>
				<key_type>autoincrement</key_type>
				<db_table>patchcablecolor</db_table>
				<db_key_field>id</db_key_field>
				<db_final_class_field/>
				<naming>
					<attributes>
						<attribute id="name"/>
					</attributes>
				</naming>
				<display_template/>
				<icon>images/patchcablecolor.png</icon>
				<reconciliation>
					<attributes>
						<attribute id="name"/>
					</attributes>
				</reconciliation>
				<uniqueness_rules>
					<rule id="name">
						<attributes>
							<attribute id="name"/>
						</attributes>
						<filter/>
						 <disabled>false</disabled>
						<is_blocking>true</is_blocking>
					</rule>
				</uniqueness_rules>
			</properties>
			<fields>
				<field id="name" xsi:type="AttributeString">
					<sql>name</sql>
					<default_value/>
					<is_null_allowed>false</is_null_allowed>
				</field>
				<field id="comment" xsi:type="AttributeText">
					<sql>comment</sql>
					<default_value/>
					<is_null_allowed>true</is_null_allowed>
				</field>
				<field id="patchcable_list" xsi:type="AttributeLinkedSet">
					<linked_class>PatchCable</linked_class>
					<ext_key_to_me>patchcablecolor_id</ext_key_to_me>
					<edit_mode>add_only</edit_mode>
					<count_min>0</count_min>
					<count_max>0</count_max>
					<duplicates/>
				</field>
			</fields>
			<methods>
			</methods>
			<presentation>
				<details>
					<items>
						<item id="name">
							<rank>10</rank>
						</item>
						<item id="comment">
							<rank>20</rank>
						</item>
						<item id="patchcable_list">
							<rank>30</rank>
						</item>
					</items>
				</details>
				<search>
					<items>
						<item id="name">
							<rank>10</rank>
						</item>
						<item id="comment">
							<rank>20</rank>
						</item>
					</items>
				</search>
				<list>
					<items>
						<item id="comment">
							<rank>20</rank>
						</item>
					</items>
				</list>
			</presentation>
		</class>
		<class id="PatchCable" _delta="define">
			<parent>PhysicalDevice</parent>
			<properties>
				<category>bizmodel,searchable</category>
				<abstract>false</abstract>
				<key_type>autoincrement</key_type>
				<db_table>patchcable</db_table>
				<db_key_field>id</db_key_field>
				<db_final_class_field/>
				<naming>
					<attributes>
						<attribute id="name"/>
					</attributes>
				</naming>
				<display_template/>
				<icon>images/patchcable.png</icon>
				<reconciliation>
					<attributes>
						<attribute id="name"/>
						<attribute id="org_id"/>
						<attribute id="organization_name"/>
					</attributes>
				</reconciliation>
			</properties>
			<fields>
				<field id="patchcablecolor_id" xsi:type="AttributeExternalKey">
					<sql>patchcablecolor_id</sql>
					<target_class>PatchCableColor</target_class>
					<is_null_allowed>true</is_null_allowed>
					<on_target_delete>DEL_MANUAL</on_target_delete>
				</field>
				<field id="physcommtype_a_id" xsi:type="AttributeExternalKey">
					<sql>physcommtype_a_id</sql>
					<target_class>GenericPhysCommConnector</target_class>
					<is_null_allowed>false</is_null_allowed>
					<on_target_delete>DEL_MANUAL</on_target_delete>
				</field>
				<field id="physcommtype_a_type" xsi:type="AttributeExternalField">
					<extkey_attcode>physcommtype_a_id</extkey_attcode>
					<target_attcode>name</target_attcode>
				</field>
				<field id="remote_a_id" xsi:type="AttributeExternalKey">
					<sql>remote_a_id</sql>
					<target_class>GenericCommLayer1Interface</target_class>
					<is_null_allowed>true</is_null_allowed>
					<on_target_delete>DEL_MANUAL</on_target_delete>
					<filter><![CDATA[SELECT PatchPanelPort WHERE  cable_id = '' AND physcommtype_id = :this->physcommtype_a_id UNION SELECT GenericCommPhysInterface WHERE  cable_id = '' AND physcommtype_id = :this->physcommtype_a_id]]></filter>
					<dependencies>
						<attribute id="physcommtype_a_id" />
					</dependencies>
				</field>
				<field id="remote_a_name" xsi:type="AttributeExternalField">
					<extkey_attcode>remote_a_id</extkey_attcode>
					<target_attcode>name</target_attcode>
				</field>
				<field id="physcommtype_b_id" xsi:type="AttributeExternalKey">
					<sql>physcommtype_b_id</sql>
					<target_class>GenericPhysCommConnector</target_class>
					<is_null_allowed>false</is_null_allowed>
					<on_target_delete>DEL_MANUAL</on_target_delete>
				</field>
				<field id="physcommtype_b_type" xsi:type="AttributeExternalField">
					<extkey_attcode>physcommtype_b_id</extkey_attcode>
					<target_attcode>name</target_attcode>
				</field>
				<field id="remote_b_id" xsi:type="AttributeExternalKey">
					<sql>remote_b_id</sql>
					<target_class>GenericCommLayer1Interface</target_class>
					<is_null_allowed>true</is_null_allowed>
					<on_target_delete>DEL_MANUAL</on_target_delete>
					<filter><![CDATA[SELECT PatchPanelPort WHERE  cable_id = '' AND physcommtype_id = :this->physcommtype_b_id UNION SELECT GenericCommPhysInterface WHERE  cable_id = '' AND physcommtype_id = :this->physcommtype_b_id]]></filter>
					<dependencies>
						<attribute id="physcommtype_b_id" />
					</dependencies>
				</field>
				<field id="remote_b_name" xsi:type="AttributeExternalField">
					<extkey_attcode>remote_b_id</extkey_attcode>
					<target_attcode>name</target_attcode>
				</field>
				<field id="length" xsi:type="AttributeDecimal">
					<sql>length</sql>
					<default_value></default_value>
					<is_null_allowed>true</is_null_allowed>
					<digits>7</digits>
					<decimals>2</decimals>
				</field>
				<field id="straight-crossed" xsi:type="AttributeEnum">
					<values>
						<value id="straight">straight</value>
						<value id="crossed">crossed</value>
					</values>
					<sql>straight-crossed</sql>
					<default_value>straight</default_value>
					<is_null_allowed>true</is_null_allowed>
					<display_style> radio_horizontal</display_style>
				</field>
			</fields>
			<presentation>
				<details>
					<items>
						<item id="name">
							<rank>10</rank>
						</item>
						<item id="org_id">
							<rank>12</rank>
						</item>
						<item id="location_id">
							<rank>15</rank>
						</item>
						<item id="description">
							<rank>20</rank>
						</item>
						<item id="patchcablecolor_id">
							<rank>30</rank>
						</item>
						<item id="length">
							<rank>40</rank>
						</item>
						<item id="straight-crossed">
							<rank>50</rank>
						</item>
						<item id="physcommtype_a_id">
							<rank>60</rank>
						</item>
						<item id="remote_a_id">
							<rank>70</rank>
						</item>
						<item id="physcommtype_b_id">
							<rank>80</rank>
						</item>
						<item id="remote_b_id">
							<rank>90</rank>
						</item>
					</items>
				</details>
				<search>
					<items>
						<item id="name">
							<rank>10</rank>
						</item>
						<item id="location_id">
							<rank>15</rank>
						</item>
						<item id="patchcablecolor_id">
							<rank>30</rank>
						</item>
						<item id="length">
							<rank>40</rank>
						</item>
						<item id="straight-crossed">
							<rank>50</rank>
						</item>
						<item id="physcommtype_a_id">
							<rank>60</rank>
						</item>
						<item id="remote_a_id">
							<rank>70</rank>
						</item>
						<item id="physcommtype_b_id">
							<rank>80</rank>
						</item>
						<item id="remote_b_id">
							<rank>90</rank>
						</item>
					</items>
				</search>
				<list>
					<items>
						<item id="name">
							<rank>10</rank>
						</item>
						<item id="location_id">
							<rank>15</rank>
						</item>
						<item id="patchcablecolor_id">
							<rank>30</rank>
						</item>
						<item id="length">
							<rank>40</rank>
						</item>
						<item id="straight-crossed">
							<rank>50</rank>
						</item>
						<item id="physcommtype_a_id">
							<rank>60</rank>
						</item>
						<item id="remote_a_id">
							<rank>70</rank>
						</item>
						<item id="physcommtype_b_id">
							<rank>80</rank>
						</item>
						<item id="remote_b_id">
							<rank>90</rank>
						</item>
					</items>
				</list>
			</presentation>
			<methods>
				<method id="ConnectCable">
					<static>false</static>
					<access>protected</access>
					<type>Overload-cmdbAbstractObject</type>
					<code><![CDATA[ protected function ConnectCable()
						{
							// print "ConnectCable begins<BR>";
							// End side A
							if (!(empty($this->Get('remote_a_id'))))
							{
								// print "remote_a_name = ".$this->Get('remote_a_name')."<br>";
								// try to get the port this cable is connected to
								$oDevice = MetaModel::GetObject('GenericCommLayer1Interface', $this->Get('remote_a_id'));
								if (is_object($oDevice) && (get_class($oDevice) == 'PatchPanelPort' || get_class($oDevice) == 'GenericCommPhysInterface'))
								{
									// print "Test Object OK<br>";
									$sOQL = "SELECT GenericCommLayer1Interface WHERE id = :device";
									$oConnectionSet = new DBObjectSet(DBObjectSearch::FromOQL($sOQL), array(), array('device' => $this->Get('remote_a_id'),));

									// There should be one link - do it in a safe manner anyway
									while ($oConnection = $oConnectionSet->Fetch())
									{
										// print "Updating : '".$oConnection->Get('name')."'<br>";
										$oConnection->Set('cable_id', $this->GetKey());
										$oConnection->DBUpdate();
									}
								}
							}
							// End side B
							if (!(empty($this->Get('remote_b_id'))))
							{
								// print "remote_b_name = ".$this->Get('remote_b_name')."<br>";
								// try to get the port this cable is connected to
								$oDevice = MetaModel::GetObject('GenericCommLayer1Interface', $this->Get('remote_b_id'));
								if (is_object($oDevice) && (get_class($oDevice) == 'PatchPanelPort' || get_class($oDevice) == 'GenericCommPhysInterface'))
								{
									// print "Test Object OK<br>";
									$sOQL = "SELECT GenericCommLayer1Interface WHERE id = :device";
									$oConnectionSet = new DBObjectSet(DBObjectSearch::FromOQL($sOQL), array(), array('device' => $this->Get('remote_b_id'),));

									// There should be one link - do it in a safe manner anyway
									while ($oConnection = $oConnectionSet->Fetch())
									{
										// print "Updating : '".$oConnection->Get('name')."'<br>";
										$oConnection->Set('cable_id', $this->GetKey());
										$oConnection->DBUpdate();
									}
								}
							}
							// print "ConnectCable ends<BR>";
						}
					]]></code>
				</method>
				<method id="DisconnectCable">
					<static>false</static>
					<access>protected</access>
					<type>Overload-cmdbAbstractObject</type>
					<code><![CDATA[ protected function DisconnectCable()
						{
							// print "DisconnectCable begins<BR>";
							// End side A
							if (!(empty($this->GetOriginal('remote_a_id'))))
							{
								// print "was connected_to_name = ".$this->GetOriginal('remote_a_name')."<br>";
								// try to get the port this cable was connected to
								// This one was hard to find : adding false in the next request allow a null answer
								// witch is OK as we have to test after operations anyway
								// see also $$mustBeFound value for MetaModel::GetObject
								$oDevice = MetaModel::GetObject('GenericCommLayer1Interface', $this->GetOriginal('remote_a_id'), false);
								if (is_object($oDevice) && (get_class($oDevice) == 'PatchPanelPort' || get_class($oDevice) == 'GenericCommPhysInterface'))
								{
									// print "Test Object OK<br>";
									$sOQL = "SELECT GenericCommLayer1Interface WHERE cable_id = :device";
									$oConnectionSet = new DBObjectSet(DBObjectSearch::FromOQL($sOQL), array(), array('device' => $this->GetKey(),));

									// There should be one link - do it in a safe manner anyway
									while ($oConnection = $oConnectionSet->Fetch())
									{
										// print "Updating : '".$oConnection->Get('name')."'<br>";
										$oConnection->Set('cable_id', '');
										$oConnection->DBUpdate();
									}
								}
							}
							// End side B
							if (!(empty($this->GetOriginal('remote_b_id'))))
							{
								// print "was connected_to_name = ".$this->GetOriginal('remote_b_name')."<br>";
								// try to get the port this cable was connected to
								// This one was hard to find : adding false in the next request allow a null answer
								// witch is OK as we have to test after operations anyway
								// see also $$mustBeFound value for MetaModel::GetObject
								$oDevice = MetaModel::GetObject('GenericCommLayer1Interface', $this->GetOriginal('remote_b_id'), false);
								if (is_object($oDevice) && (get_class($oDevice) == 'PatchPanelPort' || get_class($oDevice) == 'GenericCommPhysInterface'))
								{
									// print "Test Object OK<br>";
									$sOQL = "SELECT GenericCommLayer1Interface WHERE cable_id = :device";
									$oConnectionSet = new DBObjectSet(DBObjectSearch::FromOQL($sOQL), array(), array('device' => $this->GetKey(),));

									// There should be one link - do it in a safe manner anyway
									while ($oConnection = $oConnectionSet->Fetch())
									{
										// print "Updating : '".$oConnection->Get('name')."'<br>";
										$oConnection->Set('cable_id', '');
										$oConnection->DBUpdate();
									}
								}
							}
							// print "DisconnectCable ends<BR>";
						}
					]]></code>
				</method>
				<method id="AfterInsert">
					<static>false</static>
					<access>protected</access>
					<type>Overload-DBObject</type>
					<code><![CDATA[	protected function AfterInsert()
						{
							$this->ConnectCable();
							parent::AfterInsert();
				}]]></code>
				</method>
				<method id="OnUpdate">
					<static>false</static>
					<access>protected</access>
					<type>Overload-DBObject</type>
					<code><![CDATA[	protected function OnUpdate()
						{
							$this->DisconnectCable();
							$this->ConnectCable();
							parent::OnUpdate();
				}]]></code>
				</method>
				<method id="OnDelete">
					<static>false</static>
					<access>protected</access>
					<type>Overload-DBObject</type>
					<code><![CDATA[	protected function OnDelete()
						{
							$this->DisconnectCable();
							parent::OnDelete();
				}]]></code>
				</method>
			</methods>
			<relations>
			</relations>
		</class>
		<!-- here comes modifications on existing classes -->
		<class id="GenericCommLayer1Interface" _delta="must_exist">
			<fields>
				<field id="cable_id" xsi:type="AttributeExternalKey" _delta="define">
					<sql>cable_id</sql>
					<target_class>PatchCable</target_class>
					<is_null_allowed>true</is_null_allowed>
					<on_target_delete>DEL_MANUAL</on_target_delete>
					<filter><![CDATA[SELECT PatchCable WHERE (remote_a_id = '' AND physcommtype_a_id = :this->physcommtype_id) OR (remote_b_id = '' AND physcommtype_b_id = :this->physcommtype_id)]]></filter>
					<dependencies>
					</dependencies>
				</field>
				<field id="cable_name" xsi:type="AttributeExternalField" _delta="define">
					<extkey_attcode>cable_id</extkey_attcode>
					<target_attcode>name</target_attcode>
				</field>
			</fields>
			<presentation>
				<details>
					<items>
						<item id="cable_id" _delta="define">
							<rank>120</rank>
						</item>
					</items>
				</details>
				<list>
					<items>
						<item id="cable_id" _delta="define">
							<rank>120</rank>
						</item>
					</items>
				</list>
				<search>
					<items>
						<item id="cable_id" _delta="define">
							<rank>120</rank>
						</item>
					</items>
				</search>
			</presentation>
		</class>
		<class id="GenericCommPhysInterface" _delta="must_exist">
			<presentation>
				<details>
					<items>
						<item id="cable_id" _delta="define">
							<rank>115</rank>
						</item>
					</items>
				</details>
				<list>
					<items>
						<item id="cable_id" _delta="define">
							<rank>115</rank>
						</item>
					</items>
				</list>
				<search>
					<items>
						<item id="cable_id" _delta="define">
							<rank>115</rank>
						</item>
					</items>
				</search>
			</presentation>
		</class>
		<!-- Thanks to VDumas (again), the correct way to extend an AttributeEnum field -->
		<class id="Model" _delta="must_exist">
			<fields>
				<field id="type" xsi:type="AttributeEnum" _delta="must_exist">
					<values>
						<value id="PatchPanel" _delta="define">PatchPanel</value>
					</values>
				</field>
			</fields>
		</class>
	</classes>
	<menus>
		<menu id="ConfigManagementOverview" xsi:type="DashboardMenuNode" _delta="must_exist">
			<rank>1</rank>
			<parent>ConfigManagement</parent>
			<definition>
				<layout>DashboardLayoutOneCol</layout>
				<title/>
				<cells>
					<cell id="4" _delta="must_exist"> <!-- Dashboard -> Miscellaneous -->
						<rank>0</rank>
						<dashlets>
							<dashlet id="87" xsi:type="DashletBadge" _delta="define">
								<rank>14</rank>
								<class>PatchPanel</class>
							</dashlet>
							<dashlet id="88" xsi:type="DashletBadge" _delta="define">
								<rank>15</rank>
								<class>PatchPanelPort</class>
							</dashlet>
							<dashlet id="99" xsi:type="DashletBadge" _delta="define">
								<rank>8</rank>
								<class>PatchCable</class>
							</dashlet>
						</dashlets>
					</cell>
				</cells>
			</definition>
		</menu>
	</menus>
	<user_rights>
		<groups>
		</groups>
		<profiles>
		</profiles>
	</user_rights>
</itop_design>
